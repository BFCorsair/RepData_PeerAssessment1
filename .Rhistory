data("ToothGrowth")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
load(ddply)
load(dplyr)
?ddply
?ddplyr
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:plyr", unload=TRUE)
detach("package:dplyr", unload=TRUE)
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
setwd("/Users/bfraenkel/Documents/Data-Science/Coursera/05_Reproducible_Research/Project1")
source("Repro_Research_1.R")
daily_steps_full
activity_full[activity_full$date == "2012-11-30", ]
activity_full <- mutate(activity, steps = ifelse(is.na(steps), round(av_steps[match(interval,av_steps$interval), "avrg_steps"],0), steps))
activity_full[activity_full$date == "2012-11-30", ]
daily_steps_full <- ddply(activity_full, .(date), summarize, sum_steps=sum(steps))
daily_steps_full
mean_steps_full <- mean(daily_steps_full$sum_steps)
mean_steps_full
source("Repro_Research_1.R")
activity_full <- mutate(activity, steps = ifelse(is.na(steps), round(av_steps[match(interval,av_steps$interval), "avrg_steps"],0), steps))
any(is.na(activity_full))
daily_steps_full <- ddply(activity_full, .(date), summarize, sum_steps=sum(steps))
daily_steps_full
source("Repro_Research_1.R")
?stop
source("Repro_Research_1.R")
qplot(sum_steps, data=daily_steps_full, geom="histogram")
?weekdays
weekdays("2012-11-30")
weekdays(as.Date("2012-11-30"))
weekdays(as.Date("2012-11-20"))
day_vs_end <- function(date_str) {
wkday <- weekdays(as.Date(date_str))
ifelse(wkday == "Saturday" | wkday == "Sunday", "weekend", "weekday")
}
day_vs_end("2012-11-30")
day_vs_end("2012-11-29")
day_vs_end("2012-11-28")
day_vs_end("2012-11-27")
day_vs_end("2012-11-26")
day_vs_end("2012-11-25")
day_vs_end("2012-11-24")
day_vs_end("2012-11-23")
activity_final <- mutate(activity_full, day_vs_end <- day_vs_end(date))
activity_final <- mutate(activity_full, day_vs_end = day_vs_end(date))
head(activity_final)
head(activity_final,20)
tail(activity_final)
activity_final <- mutate(activity_final, day_vs_end = as.factor(day_vs_end))
str(activity_final)
interval_steps_final <- ddply(activity_final, .(interval), summarize, sum_steps=sum(steps))
head(interval_steps_final)
activity_weekday <- activity_final[day_vs_end == weekday, c("interval", "steps")]
activity_weekday <- activity_final[day_vs_end == "weekday", c("interval", "steps")]
activity_weekday <- activity_final[day_vs_end == 1, c("interval", "steps")]
activity_weekday <- activity_final[activity_final$day_vs_end == "weekday", c("interval", "steps")]
head(activity_weekday)
activity_weekend <- activity_final[activity_final$day_vs_end == "weekend", c("interval", "steps")]
nrow(activity_weekday)
nrow(activity_weekday) + nrow(activity_weekend)
interval_steps_weekday <- ddply(activity_weekday, .(interval), summarize, sum_steps=sum(steps))
g <- ggplot(interval_steps_weekday,aes(interval, sum_steps))
g <- g + geom_line()
g
interval_steps_weekend <- ddply(activity_weekend, .(interval), summarize, sum_steps=sum(steps))
g <- ggplot(interval_steps_weekend,aes(interval, sum_steps))
g <- g + geom_line()
g
g <- ggplot(interval_steps_weekend,aes(interval, sum_steps))
g <- g+geom_line(size=1,colour="red")
g
g <- ggplot(interval_steps_weekday,aes(interval, sum_steps))
g <- g+geom_line(size=1,colour="blue")
q <- ggplot(interval_steps_weekend,aes(interval, sum_steps))
q <- q+geom_line(size=1,colour="red")
multiplot(g,q, rows=2)
library(ggplot2)
g <- ggplot(interval_steps_weekday,aes(interval, sum_steps))
g <- g+geom_line(size=1,colour="blue")
q <- ggplot(interval_steps_weekend,aes(interval, sum_steps))
q <- q+geom_line(size=1,colour="red")
multiplot(g,q, rows=2)
library(grid)
g <- ggplot(interval_steps_weekday,aes(interval, sum_steps))
g <- g+geom_line(size=1,colour="blue")
q <- ggplot(interval_steps_weekend,aes(interval, sum_steps))
q <- q+geom_line(size=1,colour="red")
multiplot(g,q, rows=2)
grid.arrange(g, q, nrow=2)
library(gridExtra)
grid.arrange(g, q, nrow=2)
source("Repro_Research_1.R")
nb_wkdy
source("Repro_Research_1.R")
sum(interval_steps_weekday$av_steps)
sum(interval_steps_weekend$av_steps)
source("Repro_Research_1.R")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
?AlzheimerDisease
version(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library("AppliedPredictiveModeling", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
data(AlzheimerDisease)
str(AlzheimerDisease)
?AlzheimerDisease
str(diagnosis)
str(predictors)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(inTrain)
str(mixtures)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
inTrain
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
nrow(training)
nrow(testing)
nrow(mixtures)
qplot(SuperPlasticizer, data=mixtures, geom="histogram")
names(mixtures)
qplot(Superplasticizer, data=mixtures, geom="histogram")
summarize(mixtures$Superplasticizer)
library(stats)
summarize(mixtures$Superplasticizer)
summary(mixtures$Superplasticizer)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(predictors)
?preProcess
grep(colnames(predictor), "IL")
grep(colnames(predictors), "IL")
grep("IL", colnames(predictors))
grep("IL*", colnames(predictors))
grep("^IL", colnames(predictors))
colnames(adData)
q3Data <- adData[,c(1, grep("^IL", colnames(adData)))]
str(q3Data)
preProcess(q3Data, method="pca", thresh=0.9)
q3Data <- adData[,c(grep("^IL", colnames(adData)))]
preProcess(q3Data, method="pca", thresh=0.9)
q4training <- adData[,c(1, grep("^IL", colnames(adData)))]
preProcess(q4Data[,-1], method="pca", thresh=0.9)
preProcess(q4training[,-1], method="pca", thresh=0.9)
preProcess(q4training[,-1], method="pca", thresh=0.8)
preProc1 <- preProcess(q4training[,-1], method="pca")
q4PC1 <- predict(preProc1, q4training[,-1])
summary(q4PC1)
summary(preProc1)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# Create a new data frame that only contains the predictors that start with "IL"
q3train <- training[,c(grep("^IL", colnames(training)))]
preProcess(q3train, method="pca", thresh=0.9)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# Create a new data frame that only contains the diagnosis
# and the predictors that start with "IL"
q4training <- training[,c(1, grep("^IL", colnames(training)))]
q4testing <- testing[,c(1, grep("^IL", colnames(testing)))]
preProcess(q4training[,-1], method="pca", thresh=0.8)
# PCA needed 7 components to capture 80 percent of the variance
preProc1 <- preProcess(q4training[,-1], method="pca")
q4PC1 <- predict(preProc1, q4training[,-1])
preProc2 <- preProcess(q4training[,-1], method="pca", pcaComp = 7 )
q4PC2 <- predict(preProc2, q4training[,-1])
modelFit <- train(q4training$diagnosis ~ ., method="glm", preProcess="pca", data=q4training)
confusionMatrix(q4testing$diagnosis, predict(modelFit, q4testing))
install.packages('e1071', dependencies=TRUE)
modelFit <- train(q4training$diagnosis ~ ., method="glm", preProcess="pca", data=q4training)
confusionMatrix(q4testing$diagnosis, predict(modelFit, q4testing))
modelFit2 <- train(q4training$diagnosis ~ ., method="glm", preProcess="pca", data=q4training, pcaComp=7)
confusionMatrix(q4testing$diagnosis, predict(modelFit2, q4testing))
ncol(q4training)
modelFit2 <- train(q4training$diagnosis ~ ., method="glm", data=q4PC2)
confusionMatrix(q4testing$diagnosis, predict(modelFit2, q4testing))
preProc2 <- preProcess(q4training[,-1], method="pca", pcaComp = 7 )
q4PC2 <- predict(preProc2, q4training[,-1])
modelFit2 <- train(q4training$diagnosis ~ ., method="glm", data=q4PC2)
confusionMatrix(q4testing$diagnosis, predict(modelFit2, q4testing))
str(modelFit2)
str(q4PC2)
str(q4PC1)
summary(modelFit2)
confusionMatrix(q4testing$diagnosis, predict(modelFit2, q4testing))
preProc1 <- preProcess(q4training[,-1], method="pca")
q4PC1 <- predict(preProc1, q4training[,-1])
modelFit1 <- train(q4training$diagnosis ~ ., method="glm", data=q4PC1)
confusionMatrix(q4testing$diagnosis, predict(modelFit1, q4testing))
preProc2 <- preProcess(q4training[,-1], method="pca", pcaComp = 7 )
trainPC2 <- predict(preProc2, q4training[,-1])
modelFit2 <- train(q4training$diagnosis ~ ., method="glm", data=trainPC2)
testPC2 <- predict(preProc2, q4testing[,-1])
confusionMatrix(q4testing$diagnosis, predict(modelFit2, testPC2))
reProc1 <- preProcess(q4training[,-1], method="pca")
trainPC1 <- predict(preProc1, q4training[,-1])
modelFit1 <- train(q4training$diagnosis ~ ., method="glm", data=trainPC1)
testPC1 <- predict(preProc1, q4testing[,-1])
confusionMatrix(q4testing$diagnosis, predict(modelFit1, testPC1))
preProc1 <- preProcess(q4training[,-1], method="pca")
trainPC1 <- predict(preProc1, q4training[,-1])
modelFit1 <- train(q4training$diagnosis ~ ., method="glm", data=trainPC1)
testPC1 <- predict(preProc1, q4testing[,-1])
confusionMatrix(q4testing$diagnosis, predict(modelFit1, testPC1))
modelFit1 <- train(q4training$diagnosis ~ ., method="glm", data=q4training)
confusionMatrix(q4testing$diagnosis, predict(modelFit1, q4testing))
